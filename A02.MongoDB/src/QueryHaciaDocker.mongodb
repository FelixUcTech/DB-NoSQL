// // Como en SQL o PosgreSQL si seleccionas y corres el Query, solo ejecutará lo seleccionado
// // Para habilitar parte del codigo quitar los comentarios podemos usar "Ctr + }"
use("Tienda")

// //----------------------------
// // Consulta de filtro
// db.Productos.find({ "Autor": { "$regex": "^a", "$options": "i" } })

// //----------------------------
// // Insertar por uno
// db.Productos.insertOne({
//     _id: 101,
//     name: "Barco en la tempestad",
//     price: 8000.00,
//     autor: "Adira I. Uc H."
// })

// db.Productos.insertOne({
//     _id: 10,
//     name: "Barco en la tempestad",
//     price: 8000.00,
//     autor: "Adira I. Uc H."
// })

// db.Productos.insertOne({
//     _id: 201,
//     name: "Medusa por la ventana",
//     price: 2000.00,
//     autor: "Anette Michel L. R."
// })

// db.Productos.find() // Busca todos los documento de la colección

// db.Productos.drop() // Elimina todos los documentos de una colección

// //Si al ajecutar un query, hay un error solo se habrá ejecutado hasta la sentencia previa al error, lo demás no se habrá realizado.
// //Si hay documentos existentes, y se genera un colición hay una manera de solventarlo

// //----------------------------
// //Insertar por varios
// db.Productos.drop()
// db.Productos.insertOne({
//     _id: 201,
//     name: "Cucaracha comiendo amburguesa",
//     price: 2000.00,
//     autor: "Anette Michel L. R."
// })



// db.Productos.insertMany([  //si hay una colision de _id  si inserta pero hasta la colision
//     {
//         _id: 201,
//         name: "Cucaracha comiendo amburguesa",
//         price: 2000.00,
//         autor: "Anette Michel L. R."
//     },
//     {
//         _id: 202,
//         name: "Bob Ordellando medusa",
//         price: 2000.00,
//         autor: "Anette Michel L. R."
//     },
//     {
//         _id: 203,
//         name: "Medusa por la ventana",
//         price: 2000.00,
//         autor: "Anette Michel L. R."
//     }
// ],{
//     ordered: false //si hay una colision de _id  si inserta pero no inserta los colisionados
// }) 

// db.Productos.find()

// //----------------------------
// // Actualizar un producto
// // Operador $SET
// db.Productos.updateOne(
//     //Query, especificar donde hacer el cambio
//     { _id: 201},
//     // Cambios, de 1 a los que sean requeridos
//     {$set:{
//         autor: "Adira Itzel Uc Hernández",
//         price: 250.00
//     }}
// )

// //----------------------------
// // Normalmente se incrementan valores númericos
// // Operador $Inc
// db.Productos.updateOne(
//     //Query, especificar donde hacer el cambio
//     { _id: 201},
//     // Cambios, de 1 a los que sean requeridos
//     {$inc:{
//         price: 25 //incremento el 10%
//     }}
// )

// //----------------------------
// //Actualizar por el ID del objto de Mongo
// db.Productos.drop()
// db.Productos.insertOne({
//     name: "Cucaracha comiendo amburguesa",
//     price: 2000.00,
//     autor: "Anette Michel L. R."
// })

// db.Productos.updateOne(
//     //Query, especificar donde hacer el cambio
//     { _id: ObjectId('672ceeeca5b25e3f217962b9')},
//     // Cambios, de 1 a los que sean requeridos
//     {$inc:{
//         price: -25 //incremento el 10%
//     }}
// )
// db.Productos.find()

//----------------------------
// db.inventory.drop()
// db.inventory.insertMany([
//   { _id: 1, item: { name: "item ab", code: "123", description : "Single line description."    }, qty: 15, tags: [ "school", "book", "bag", "headphone", "appliance" ], },
//   { _id: 2, item: { name: "item cd", code: "123", description : "First line\nSecond line"     }, qty: 20, tags: [ "appliance", "school", "book" ] },
//   { _id: 3, item: { name: "item ij", code: "456", description : "Many spaces before     line" }, qty: 25, tags: [ "school", "book" ] },
//   { _id: 4, item: { name: "item xy", code: "456", description : "Multiple\nline description"  }, qty: 30, tags: [ "electronics", "school" ] },
//   { _id: 5, item: { name: "item mn", code: "000" }, qty: 20, tags: [ "appliance", "school" ] },
// ])

// // ----------------------------
// // USO DE PUSH EN ARRAYS PARA PONER ELEMENTOS DENTRO DE UN ARRAY
// use("Tienda")
// db.inventory.updateOne(
//     {_id: 4},
//     {
//         $push:{
//             tags: "headphone"
//         } 
//     }
// )
// db.inventory.find()

//----------------------------
//USO DE PULL EN ARRAYS PARA PONER ELEMENTOS DENTRO DE UN ARRAY
// db.inventory.updateOne(
//     {},
//     {
//         $pull:{
//             tags: "headphone"
//         } 
//     }
// )
// db.inventory.find()

//----------------------------
//USO DE PULL EN ARRAYS PARA PONER ELEMENTOS DENTRO DE UN ARRAY
// db.inventory.updateMany(
//     {},
//     {
//         $pull:{
//             tags: "headphone"
//         } 
//     }
// )
// db.inventory.find()

//USO DE PUSH EN ARRAYS PARA PONER ELEMENTOS DENTRO DE UN ARRAY
// db.inventory.updateMany(
//     {},
//     {
//         $pull:{
//             tags: {
//                 $in: ["headphone", "school", "book"]
//             }
//         } 
//     }
// )
// db.inventory.find()

//----------------
//UPSERT (ACTUALIZAR E INSERTAR)



// //----------------
// use("platzi_store")

// db.inventory.drop()

// db.inventory.insertMany([
//   { _id: 1, item: { name: "ab", code: "123" }, qty: 15, tags: ["A", "B", "C"] },
//   { _id: 2, item: { name: "cd", code: "123" }, qty: 20, tags: ["B"] },
//   { _id: 3, item: { name: "ij", code: "456" }, qty: 25, tags: ["A", "B"] },
//   { _id: 4, item: { name: "xy", code: "456" }, qty: 30, tags: ["B", "A"] },
//   { _id: 5, item: { name: "mn", code: "000" }, qty: 20, tags: [["A", "B"], "C"] },
// ])

// db.inventory.find()


// //---------------- Forma implicita
// use("platzi_store")

// //Using $eq
// db.inventory.find({qty: 20})


// //---------------- Forma explicita
// use("platzi_store")

// //Using $eq
// db.inventory.find({qty: {$eq: 20}})

//---------------- Subconsulta
// use("platzi_store")

// //Using $eq
// db.inventory.find({ "item.code": {$eq : "123"}})

// //---------------- Actualizar por exclusión
// use("platzi_store")
// //Using $ne
// db.inventory.updateMany(
//     { "qty": {$ne: 20}}, //Condición de busqueda
//     {$inc: {qty: 10}} //Actualización
// )

// use("platzi_store")
// db.inventory.find({
//   qty: {$gt: 20}
// })

// //----------------
// use("platzi_store")
// db.inventory.find({
//   qty: {$gt: 20} //Selecciona todo lo que se mayor a 20 en cantidad
// })

// //----------------
// use("platzi_store")
// db.inventory.find({
//   qty: {$gte: 20} //Selecciona todo lo que se mayor a 20 en cantidad o igual en este caso
// })

// //----------------
// use("platzi_store")
// db.inventory.find({
//   qty: {$lt: 30} //Selecciona todo lo que se menor a 30 en cantidad
// })

// //----------------
// use("platzi_store")
// db.inventory.find({
//   qty: {$lte: 30} //Selecciona todo lo que se menor a 30 en cantidad o igual en este caso
// })

// //------------------------------------
// //$regex
// use("platzi_store")

// db.inventory.drop()

// db.inventory.insertMany([
//   { _id: 1, item: { name: "ab", code: "123", description : "Single line description."    }, qty: 15, tags: ["A", "B", "C"] },
//   { _id: 2, item: { name: "cd", code: "123", description : "First line\nSecond line"     }, qty: 20, tags: ["B"] },
//   { _id: 3, item: { name: "ij", code: "456", description : "Many spaces before     line" }, qty: 25, tags: ["A", "B"] },
//   { _id: 4, item: { name: "xy", code: "456", description : "Multiple\nline description"  }, qty: 30, tags: ["B", "A"] },
//   { _id: 5, item: { name: "mn", code: "000" }, qty: 20, tags: [["A", "B"], "C"] },
// ])

// db.inventory.find()

use("platzi_store")
// //---------------------------------
// // Filtro dentro de un subdocumento
// db.inventory.find({"item.description": "Single line description."})

// //---------------------------------
// // Para una busca más general usamos expresiones regulares
// // $regex: /????/ busca de manera general en description si existe line
// db.inventory.find({"item.description": {$regex: /line/ }})

// //---------------------------------
// // Para una busca más general usamos expresiones regulares
// // $regex: /????/ busca de manera general en description si existe line
// // Esta forma no es sensible a las mayúsculas y minúsculas
// db.inventory.find({"item.description": {$regex: /lInE/i }})

// //Busca algo que termine en una palabra o terminación específica
// db.inventory.find({"item.description": {$regex: /lInE$/i }})

// //Busca algo que inicie en una palabra o prefijo específica
// db.inventory.find({"item.description": {$regex: /^single/i }})

// // Qué pasa si queremos buscar aún en multiples líneas
// // Esta bsucara de manera que si la descripción tiene salto de línea considerara también la primera palabra para consultar.
// db.inventory.find({"item.description": {$regex: /^single/im }})


// //Operaciones con arrays DataSet
// use("platzi_store")

// db.inventory.drop()

// db.inventory.insertMany([
//   { _id: 1, item: { name: "ab", code: "123", description : "Single line description."    }, qty: 15, tags: [ "school", "book", "bag", "headphone", "appliance" ] },
//   { _id: 2, item: { name: "cd", code: "123", description : "First line\nSecond line"     }, qty: 20, tags: [ "appliance", "school", "book" ] },
//   { _id: 3, item: { name: "ij", code: "456", description : "Many spaces before     line" }, qty: 25, tags: [ "school", "book" ] },
//   { _id: 4, item: { name: "xy", code: "456", description : "Multiple\nline description"  }, qty: 30, tags: [ "electronics", "school" ] },
//   { _id: 5, item: { name: "mn", code: "000" }, qty: 20, tags: [ "appliance", "school" ] },
// ])

// db.survey.drop();

// db.survey.insertMany([
//   {
//     _id: 1,
//     results: [
//       { product: "abc", score: 10 },
//       { product: "xyz", score: 5 },
//     ],
//   },
//   {
//     _id: 2,
//     results: [
//       { product: "abc", score: 8 },
//       { product: "xyz", score: 7 },
//     ],
//   },
//   {
//     _id: 3,
//     results: [
//       { product: "abc", score: 7 },
//       { product: "xyz", score: 8 },
//     ],
//   },
//   {
//     _id: 4,
//     results: [
//       { product: "abc", score: 7 },
//       { product: "def", score: 8 },
//     ],
//   },
// ]);


// $in operador
// Sirve valores específicos & arrays

// use("platzi_store")
// // in, valores y arrays
// db.inventory.find(
//     { qty: {$in: [20, 25] } }//,
//     //{qty: 1, }
// )


// use("platzi_store")
// // in, valores y arrays
// db.inventory.find(
//     { tags: { $in: ["book", "electronics"] } }
// )

// use("platzi_store")
// // nin, valores y arrays
// db.inventory.find(
//     { qty: {$nn: [20, 25] } }//,
//     //{qty: 1, }
// )

// use("platzi_store")
// // nin, valores y arrays
// db.inventory.find(
//     { tags: { $nin: ["electronics"] } }
// )

